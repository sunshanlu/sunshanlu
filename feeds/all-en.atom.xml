<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>SSL的个人Blog</title><link href="https://sunshanlu.github.io/" rel="alternate"></link><link href="https://sunshanlu.github.io/feeds/all-en.atom.xml" rel="self"></link><id>https://sunshanlu.github.io/</id><updated>2025-02-28T00:00:00+08:00</updated><subtitle>分享个人知识库</subtitle><entry><title>如何使用cmake构建一个自定义的可安装的库呢？</title><link href="https://sunshanlu.github.io/cmake-build-your-lib" rel="alternate"></link><published>2025-02-28T00:00:00+08:00</published><updated>2025-02-28T00:00:00+08:00</updated><author><name>孙善路-github</name></author><id>tag:sunshanlu.github.io,2025-02-28:/cmake-build-your-lib</id><summary type="html">&lt;h2 id="_1"&gt;背景&lt;/h2&gt;
&lt;p&gt;我觉得所有学习过某种编程语言的人，或多或少都希望自己构建一个可使用&lt;strong&gt;标准化流程&lt;/strong&gt;安装的三方库。当然我也不 …&lt;/p&gt;</summary><content type="html">&lt;h2 id="_1"&gt;背景&lt;/h2&gt;
&lt;p&gt;我觉得所有学习过某种编程语言的人，或多或少都希望自己构建一个可使用&lt;strong&gt;标准化流程&lt;/strong&gt;安装的三方库。当然我也不例外，我平时的大部分精力都会放在SLAM的学习上，我的想法是做一个简单方便的SLAM可视化小工具，用来帮助自己快速验证一个SLAM算法的效果和可行性。几个月前，我确实把一个名为&lt;a href="https://github.com/sunshanlu/SLAM_VIEWER"&gt;&lt;code&gt;SLAM_VIEWER&lt;/code&gt;&lt;/a&gt;的小工具开源了出来。为了方便自己也是为了方便大家的使用，我希望我写的三方库可以像主流的三方库一样，能够使用一个&lt;strong&gt;标准化的编译和安装&lt;/strong&gt;流程，并能够在&lt;code&gt;cmake&lt;/code&gt;中很方便地导入使用。在我查阅了&lt;code&gt;cmake&lt;/code&gt;官方文档并奴役了许多&lt;code&gt;AI&lt;/code&gt;后，得到了一套流程化的解决方案：&lt;/p&gt;
&lt;h2 id="_2"&gt;解决方案&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# CMakeLists.txt&lt;/span&gt;

&lt;span class="nb"&gt;cmake_minimum_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;VERSION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;3.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;project&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;slam_viewer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;VERSION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;0.0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;CMAKE_CXX_STANDARD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;CMAKE_CXX_STANDARD_REQUIRED&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;ON&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;NOT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;CMAKE_BUILD_TYPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;CMAKE_BUILD_TYPE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;Release&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;endif&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nb"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;NOT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;DEFINED&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;BUILD_EXAMPLES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;BUILD_EXAMPLES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;ON&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;endif&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nb"&gt;find_package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;Pangolin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;REQUIRED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;find_package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;Sophus&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;REQUIRED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;find_package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;PCL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;REQUIRED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;find_package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;TBB&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;REQUIRED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;find_package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;OpenCV&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;REQUIRED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;find_package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;Eigen3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;REQUIRED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;CMAKE_RUNTIME_OUTPUT_DIRECTORY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CMAKE_CURRENT_SOURCE_DIR&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/bin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;CMAKE_LIBRARY_OUTPUT_DIRECTORY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CMAKE_CURRENT_SOURCE_DIR&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/lib&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;CMAKE_ARCHIVE_OUTPUT_DIRECTORY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CMAKE_CURRENT_SOURCE_DIR&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/lib&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;PACKAGE_INCLUDE_INSTALL_DIR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CMAKE_INSTALL_PREFIX&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/include&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;PACKAGE_LIBS_INSTALL_DIR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CMAKE_INSTALL_PREFIX&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/lib&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;include_directories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CMAKE_CURRENT_SOURCE_DIR&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/include&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;GLOB&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;SRC_FILES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CMAKE_CURRENT_SOURCE_DIR&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/src/*.cc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;add_library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;slam_viewer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;SHARED&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SRC_FILES&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;target_link_libraries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;slam_viewer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;PUBLIC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;Pangolin_LIBRARY&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PCL_LIBRARIES&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;Sophus::Sophus&lt;/span&gt;
&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="s"&gt;TBB::tbb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;OpenCV_LIBS&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;Eigen3::Eigen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;target_include_directories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;slam_viewer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;PUBLIC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;OpenCV_INCLUDE_DIRS&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PCL_INCLUDE_DIRS&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="o"&gt;$&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="o"&gt;$&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_INTERFACE:include&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BUILD_EXAMPLES&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;add_subdirectory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;examples&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;endif&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;# 添加安装指令&lt;/span&gt;
&lt;span class="nb"&gt;install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;TARGETS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;slam_viewer&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;EXPORT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;Targets&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;LIBRARY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;DESTINATION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PACKAGE_LIBS_INSTALL_DIR&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;ARCHIVE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;DESTINATION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PACKAGE_LIBS_INSTALL_DIR&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;DIRECTORY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_SOURCE_DIR&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/include/slam_viewer&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;DESTINATION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PACKAGE_INCLUDE_INSTALL_DIR&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# 安装导出文件&lt;/span&gt;
&lt;span class="nb"&gt;install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;EXPORT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;Targets&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;FILE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;Targets.cmake&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;NAMESPACE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;::&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;DESTINATION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CMAKE_INSTALL_PREFIX&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/lib/cmake/&lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# 生成并安装Config文件&lt;/span&gt;
&lt;span class="nb"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;CMakePackageConfigHelpers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;write_basic_package_version_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_BINARY_DIR&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;ConfigVersion.cmake&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;VERSION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_VERSION&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;COMPATIBILITY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;SameMajorVersion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;configure_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;Config.cmake.in&lt;/span&gt;
&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;@ONLY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;FILES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_BINARY_DIR&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;Config.cmake&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_BINARY_DIR&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;ConfigVersion.cmake&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;DESTINATION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CMAKE_INSTALL_PREFIX&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/lib/cmake/&lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# 输出配置信息，以查看是否配置正确&lt;/span&gt;
&lt;span class="nb"&gt;message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;====================================================================&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;STATUS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;Configure:&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;STATUS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;CMAKE_BUILD_TYPE:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CMAKE_BUILD_TYPE&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;STATUS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;BUILD_EXAMPLES:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BUILD_EXAMPLES&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;STATUS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;CMAKE_INSTALL_PREFIX:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CMAKE_INSTALL_PREFIX&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;====================================================================&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面的&lt;code&gt;cmake&lt;/code&gt;代码是我根据这一套流程配置的&lt;code&gt;slam_viewer&lt;/code&gt;库，其主要涵盖以下几个方面的内容：&lt;/p&gt;
&lt;h3 id="1-targets"&gt;1.&amp;nbsp;安装&lt;code&gt;Targets&lt;/code&gt;和头文件目录&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;TARGETS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;slam_viewer&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;EXPORT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;Targets&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;LIBRARY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;DESTINATION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PACKAGE_LIBS_INSTALL_DIR&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;ARCHIVE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;DESTINATION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PACKAGE_LIBS_INSTALL_DIR&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;DIRECTORY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_SOURCE_DIR&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/include/slam_viewer&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;DESTINATION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PACKAGE_INCLUDE_INSTALL_DIR&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;install&lt;/code&gt;命令是&lt;code&gt;cmake&lt;/code&gt;中比较常用的一个命令，其作用主要是将某个文件夹，某个文件或者某些&lt;code&gt;Target&lt;/code&gt;安装到指定的位置。如果你需要安装的是某个目录，就需要使用&lt;code&gt;DIRECTORY&lt;/code&gt;关键字，并在后面跟上文件夹的位置，然后使用&lt;code&gt;DESTINATION&lt;/code&gt;关键字来指定安装的位置。在&lt;strong&gt;标准工作流程&lt;/strong&gt;里面，使用安装文件夹的命令，将头文件目录安装到&lt;code&gt;${PACKAGE_INCLUDE_INSTALL_DIR}&lt;/code&gt;位置，其中&lt;code&gt;${PACKAGE_INCLUDE_INSTALL_DIR}&lt;/code&gt;=&lt;code&gt;${CMAKE_INSTALL_PREFIX}/include&lt;/code&gt;，如果不指定&lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;的话，默认为&lt;code&gt;/usr/local&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;install&lt;/code&gt;将&lt;code&gt;TARGETS&lt;/code&gt;安装到某个位置时就比较繁琐了，首先需要指定&lt;code&gt;TARGETS&lt;/code&gt;关键字，并在后面跟上需要安装的target的名称（在&lt;code&gt;cmake&lt;/code&gt;中，可执行文件，库文件都是以&lt;code&gt;TARGET&lt;/code&gt;的形式维护）。&lt;code&gt;EXPORT&lt;/code&gt;关键字代表需要生成一个&lt;code&gt;TARGETS&lt;/code&gt;相关的依赖文件，这个依赖文件就是&lt;code&gt;${PROJECT_NAME}Targets.cmake&lt;/code&gt;。里面维护了&lt;code&gt;TARGETS&lt;/code&gt;中的依赖关系，主要有两个内容，一个是&lt;code&gt;INTERFACE_LINK_LIBRARIES&lt;/code&gt;，另一个是&lt;code&gt;INTERFACE_INCLUDE_DIRECTORIES&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;INTERFACE_LINK_LIBRARIES&lt;/code&gt;维护的是&lt;code&gt;TARGET&lt;/code&gt;所有依赖的动态库的TARGET名字，这部分是通过解析&lt;code&gt;target_link_libraries&lt;/code&gt;指令内容生成的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INTERFACE_INCLUDE_DIRECTORIES&lt;/code&gt;维护的是&lt;code&gt;TARGET&lt;/code&gt;所有依赖的头文件的路径，这部分是通过解析&lt;code&gt;target_include_directories&lt;/code&gt;指令内容生成的。&lt;/li&gt;
&lt;li&gt;当然，只有使用&lt;code&gt;PUBLIC&lt;/code&gt;和&lt;code&gt;INTERFACE&lt;/code&gt;关键字指定的依赖才会被解析并放在&lt;code&gt;INTERFACE_LINK_LIBRARIES&lt;/code&gt;和&lt;code&gt;INTERFACE_INCLUDE_DIRECTORIES&lt;/code&gt;中。&lt;/li&gt;
&lt;li&gt;这里并不会对&lt;code&gt;PUBLIC&lt;/code&gt;、&lt;code&gt;INTERFACE&lt;/code&gt;和&lt;code&gt;PRIVATE&lt;/code&gt;关键字进行解析，网上也有很多这方面的资料可以参考。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是&lt;code&gt;slam_viewerTargets.cmake&lt;/code&gt;文件的部分截图，这部分内容相当重要，或者中可以通过这个&lt;code&gt;xxxTargets.cmake&lt;/code&gt;文件来找到三方库的&lt;code&gt;Target&lt;/code&gt;信息，并且可以明确这个&lt;code&gt;Target&lt;/code&gt;的依赖关系。&lt;/p&gt;
&lt;div align="center"&gt;
    &lt;img src="https://sunshanlu.github.io/images/target.cmake.png" alt="xxxTargets.cmake" width="80%"&gt;
&lt;/div&gt;

&lt;h3 id="2-target"&gt;2.&amp;nbsp;安装导出的&lt;code&gt;Target&lt;/code&gt;依赖文件到指定位置&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;EXPORT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;Targets&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;FILE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;Targets.cmake&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;NAMESPACE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;::&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;DESTINATION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CMAKE_INSTALL_PREFIX&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/lib/cmake/&lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这一步主要是为了将&lt;code&gt;Target&lt;/code&gt;的依赖文件和&lt;code&gt;slam_viewerConfig.cmake&lt;/code&gt;文件导出到同一目录下方便&lt;code&gt;slam_viewerConfig.cmake&lt;/code&gt;文件的引用&lt;code&gt;include()&lt;/code&gt;操作。根据&lt;a href="https://cmake.org/cmake/help/latest/command/install.html#export"&gt;&lt;code&gt;cmake&lt;/code&gt;官方文档&lt;/a&gt;部分的说明，安装&lt;code&gt;TARGET&lt;/code&gt;的依赖文件必须使用带有&lt;code&gt;EXPORT&lt;/code&gt;关键字的安装命令，并且&lt;code&gt;EXPORT&lt;/code&gt;关键字后面与安装&lt;code&gt;TARGETS&lt;/code&gt;的&lt;code&gt;EXPORT&lt;/code&gt;关键字后面的内容保持一致，&lt;code&gt;FILE&lt;/code&gt;关键字后指定安装文件的文件名。&lt;code&gt;NAMESPACE&lt;/code&gt;关键字是一个可选的参数，如果带有&lt;code&gt;NAMESPACE&lt;/code&gt;，那么在其他依赖当前编译的三方库文件时，就需要在&lt;code&gt;Target&lt;/code&gt;名字前指定命名空间，在上面&lt;code&gt;slam_viewerTargets.cmake&lt;/code&gt;文件的部分截图中也能体现。在一定程度上，可以防止同名&lt;code&gt;TARGET&lt;/code&gt;的出现。&lt;/p&gt;
&lt;h3 id="3"&gt;3.&amp;nbsp;生成并安装配置文件&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;CMakePackageConfigHelpers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;write_basic_package_version_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_BINARY_DIR&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;ConfigVersion.cmake&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;VERSION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_VERSION&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;COMPATIBILITY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;SameMajorVersion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;configure_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;Config.cmake.in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;@ONLY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;FILES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_BINARY_DIR&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;Config.cmake&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_BINARY_DIR&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;ConfigVersion.cmake&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;DESTINATION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CMAKE_INSTALL_PREFIX&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/lib/cmake/&lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;首先需要引入&lt;code&gt;CMakePackageConfigHelpers&lt;/code&gt;模块，需要这个模块的&lt;code&gt;write_basic_package_version_file&lt;/code&gt;函数来写版本配置文件&lt;code&gt;xxxConfigVersion.cmake&lt;/code&gt;。其中&lt;code&gt;VERSION&lt;/code&gt;关键字后面跟项目版本号，&lt;code&gt;COMPATIBILITY&lt;/code&gt;关键字后面指定版本兼容信息，这里的版本兼容性可以为后续&lt;code&gt;find_package&lt;/code&gt;提供信息。一共有&lt;code&gt;AnyNewerVersion&lt;/code&gt;|&lt;code&gt;SameMajorVersion&lt;/code&gt;|&lt;code&gt;SameMinorVersion&lt;/code&gt;|&lt;code&gt;ExactVersion&lt;/code&gt;这四种版本兼容要求，其详细的内容解释可以看&lt;a href="https://cmake.org/cmake/help/latest/module/CMakePackageConfigHelpers.html#command:write_basic_package_version_file"&gt;&lt;code&gt;cmake&lt;/code&gt;文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;configure_file&lt;/code&gt;函数配置&lt;code&gt;xxxConfig.cmake&lt;/code&gt;文件，当我们使用&lt;code&gt;find_pacakge(xxx)&lt;/code&gt;函数来查找&lt;code&gt;xxx&lt;/code&gt;三方库时，&lt;code&gt;find_package&lt;/code&gt;函数会试图找到一个&lt;code&gt;xxxConfig.cmake&lt;/code&gt;或&lt;code&gt;xxxConfigVersion.cmake&lt;/code&gt;文件来判断是否找到了&lt;code&gt;xxx&lt;/code&gt;库。代码中&lt;code&gt;Config.cmake.in&lt;/code&gt;为配置&lt;code&gt;source&lt;/code&gt;文件路径，而&lt;code&gt;"${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"&lt;/code&gt;为配置&lt;code&gt;target&lt;/code&gt;文件路径，其中&lt;code&gt;@ONLY&lt;/code&gt;限定了替换的变量只能用&lt;code&gt;@&lt;/code&gt;符号包裹起来。&lt;code&gt;configure_file&lt;/code&gt;函数的一些实例内容解释可以看&lt;a href="https://cmake.org/cmake/help/latest/command/configure_file.html"&gt;&lt;code&gt;cmake&lt;/code&gt;文档&lt;/a&gt;。当然，根据[&amp;#8220;]&lt;/p&gt;
&lt;p&gt;最后安装&lt;code&gt;xxxConfig.cmake&lt;/code&gt;和&lt;code&gt;xxxConfigVersion.cmake&lt;/code&gt;文件到指定位置即可。这个位置&lt;strong&gt;建议&lt;/strong&gt;和&lt;code&gt;xxxTargets.cmake&lt;/code&gt;的安装位置保持一致。&lt;/p&gt;
&lt;h3 id="4-configcmakein"&gt;4.&amp;nbsp;配置&lt;code&gt;Config.cmake.in&lt;/code&gt;文件&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# Config.cmake.in&lt;/span&gt;

&lt;span class="nb"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;CMakeFindDependencyMacro&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;find_dependency&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;Pangolin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;REQUIRED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;find_dependency&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;Sophus&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;REQUIRED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;find_dependency&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;PCL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;REQUIRED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;find_dependency&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;TBB&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;REQUIRED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;find_dependency&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;OpenCV&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;REQUIRED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;find_dependency&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;Eigen3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;REQUIRED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;最后需要配置&lt;code&gt;Config.cmake.in&lt;/code&gt;文件，在第3步中，&lt;code&gt;configure_file&lt;/code&gt;函数将&lt;code&gt;Config.cmake.in&lt;/code&gt;文件配置到&lt;code&gt;${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake&lt;/code&gt;文件中，其中&lt;code&gt;@PROJECT_NAME@&lt;/code&gt;为&lt;code&gt;PROJECT_NAME&lt;/code&gt;变量，&lt;code&gt;${CMAKE_CURRENT_LIST_DIR}&lt;/code&gt;为当前&lt;code&gt;xxxConfig.cmake&lt;/code&gt;文件所在的目录。也就是为什么第3步的结尾&lt;strong&gt;建议&lt;/strong&gt;要和xxxTargets.cmake的安装装位置保持一致，如果不一致，这里&lt;code&gt;include()&lt;/code&gt;参数路径就需要更改。&lt;/p&gt;
&lt;p&gt;除此之外，还需要对自定义的三方库依赖的三方库进行配置，这里需要使用&lt;code&gt;find_dependency&lt;/code&gt;函数，而&lt;code&gt;find_dependency&lt;/code&gt;函数在模块&lt;code&gt;CMakeFindDependencyMacro&lt;/code&gt;中定义。配置好&lt;code&gt;find_dependency&lt;/code&gt;后，当其他库文件或者可执行文件依赖当前定义的库文件时，就不需要对自定义的三方库依赖的三方库进行&lt;code&gt;find_package&lt;/code&gt;操作了。&lt;/p&gt;
&lt;h3 id="5-interface_include_directories"&gt;5.&amp;nbsp;配置依赖自身的头文件路径的&lt;code&gt;INTERFACE_INCLUDE_DIRECTORIES&lt;/code&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;target_include_directories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;slam_viewer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;PUBLIC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;OpenCV_INCLUDE_DIRS&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PCL_INCLUDE_DIRS&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;$&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;$&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_INTERFACE:include&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在讲解这里的用法之前，我们需要理清楚一个比较重要的问题：&lt;/p&gt;
&lt;p&gt;在源码中可以看到，对某些库文件，没有使用&lt;code&gt;include_directories&lt;/code&gt;或者&lt;code&gt;target_include_directories&lt;/code&gt;明确指定它们的头文件路径，而有些库像&lt;code&gt;OpenCV&lt;/code&gt;和&lt;code&gt;PCL&lt;/code&gt;都需要在&lt;code&gt;CMakeLists.txt&lt;/code&gt;中明确指定头文件路径。在第一部分讲到，如果你在&lt;code&gt;target_include_directories&lt;/code&gt;中指定了某些头文件路径，那么在导出的含有依赖关系的文件&lt;code&gt;xxxTargets.cmake&lt;/code&gt;中会有一个&lt;code&gt;INTERFACE_INCLUDE_DIRECTORIES&lt;/code&gt;，这里会维护这个&lt;code&gt;Target&lt;/code&gt;依赖的头文件路径。当某些库严格按照&lt;code&gt;target_include_directories&lt;/code&gt;来维护&lt;code&gt;Target&lt;/code&gt;的依赖关系时，导出的&lt;code&gt;xxxTargets.cmake&lt;/code&gt;文件中必然保存着该&lt;code&gt;Target&lt;/code&gt;依赖的所有头文件路径，因此这种库只需要使用&lt;code&gt;target_link_libraries&lt;/code&gt;函数即可搞定头文件依赖和库文件依赖关系。然而总有些三方库因为这样或者那样的原因，选择不使用&lt;code&gt;target_include_directories&lt;/code&gt;来维护头文件依赖关系，这种库往往都会提供一个&lt;code&gt;xxx_INCLUDE_DIRS&lt;/code&gt;这个变量，供调用者使用，因此遇到这种三方库依赖时，需要将&lt;code&gt;target_include_directories&lt;/code&gt;来单独维护这份头文件依赖，然后导入到自身的&lt;code&gt;INTERFACE_INCLUDE_DIRECTORIES&lt;/code&gt;中。&lt;/p&gt;
&lt;p&gt;我相信通过上面一段阐述的内容，同学们应该能理解为什么&lt;code&gt;OpenCV&lt;/code&gt;和&lt;code&gt;PCL&lt;/code&gt;库需要单独使用&lt;code&gt;target_include_directories&lt;/code&gt;来维护头文件依赖关系，而其他库则不需要。除此之外，&lt;code&gt;$&amp;lt;BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include&amp;gt;&lt;/code&gt;和&lt;code&gt;$&amp;lt;INSTALL_INTERFACE:include&amp;gt;&lt;/code&gt;这两个内容应该吸引了你的注意。根据&lt;a href="https://cmake.org/cmake/help/latest/command/target_include_directories.html#target-include-directories"&gt;&lt;code&gt;cmake&lt;/code&gt;官方文档&lt;/a&gt;的解释，以&lt;code&gt;$&amp;lt;BUILD_INTERFACE:&lt;/code&gt;开头的内容是声明构建过程中所需要的头文件依赖关系，并且后面需要跟绝对路径，而以&lt;code&gt;$&amp;lt;INSTALL_INTERFACE:&lt;/code&gt;开头的内容则是安装过程中的头文件依赖或者使用的头文件依赖，后面需要跟以&lt;code&gt;${CMAKE_INSTALL_PREFIX}$&lt;/code&gt;为前缀的相对路径。在&lt;code&gt;xxxTargets.cmake&lt;/code&gt;中会忽略&lt;code&gt;$&amp;lt;BUILD_INTERFACE:&lt;/code&gt;开头的头文件依赖。而没有&lt;code&gt;$&amp;lt;&lt;/code&gt;开头的&lt;code&gt;CMAKE&lt;/code&gt;会认定这种头文件依赖发生在编译和安装使用过程，因此也会在&lt;code&gt;xxxTargets.cmake&lt;/code&gt;中保存下来。&lt;/p&gt;
&lt;h3 id="6"&gt;6.&amp;nbsp;如何使用？&lt;/h3&gt;
&lt;p&gt;根据上面的解释，我们不难理解所有的库文件依赖关系都在&lt;code&gt;xxxTargets.cmake&lt;/code&gt;维护的&lt;code&gt;INTERFACE_LINK_LIBRARIES&lt;/code&gt;中，而所有的头文件依赖关系都在&lt;code&gt;xxxTargets.cmake&lt;/code&gt;维护的&lt;code&gt;INTERFACE_INCLUDE_DIRECTORIES&lt;/code&gt;中，而在&lt;code&gt;xxxConfig.cmake&lt;/code&gt;中使用&lt;code&gt;find_dependency&lt;/code&gt;代替了&lt;code&gt;find_package&lt;/code&gt;函数来导入依赖库文件的&lt;code&gt;Target&lt;/code&gt;。因此使用自定义的&lt;code&gt;slam_viewer&lt;/code&gt;库时，只需要使用下面的两行代码就可以搞定，可以说非常的简单：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# your project CMakeLists.txt&lt;/span&gt;

&lt;span class="nb"&gt;find_package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;slam_viewer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;REQUIRED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;target_link_libraries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;your_target&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;slam_viewer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="admonition important"&gt;
&lt;p class="admonition-title"&gt;标准流程？&lt;/p&gt;
&lt;p&gt;上面的内容，是我自己在看了网上的教程和一些通用三方库的&lt;code&gt;CMakeLists.txt&lt;/code&gt;总结来的一套适合我自己使用的建库流程，当然这并不是唯一的建库方法。&lt;a href="https://cmake.org/cmake/help/latest/guide/tutorial/index.html"&gt;&lt;code&gt;cmake&lt;/code&gt;官方教程&lt;/a&gt;的&lt;code&gt;step9&lt;/code&gt;-&lt;code&gt;step11&lt;/code&gt;也是非常好的建库流程。我想说的是，无论使用什么样的方式，只要能实现一般三方库导入项目的功能，就是一个好的标准流程。我也非常希望我写的东西能对你有所帮助。&lt;/p&gt;
&lt;/div&gt;</content><category term="随笔"></category><category term="cmake"></category><category term="c++"></category><category term="library"></category></entry></feed>